{
  /*
			// Place your snippets for JavaScript here. Each snippet is defined under a snippet name and has a prefix, body and
			// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
			// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
			// same ids are connected.
			// Example:
			"Print to console": {
					"prefix": "log",
					"body": [
							"console.log('$1');",
							"$2"
					],
					"description": "Log output to console"
			}
  */
  "SvgIcon": {
    "prefix": "svgicon",
    "body": "<SvgIcon name=\"${1}\" />"
  },
  "JS: Promise.all": {
    "prefix": "promiseall",
    "body": "Promise.all([\n\n${1}]).then(([${2}]) => {\n\n});"
  },
  "JS: Import": {
    "prefix": "simport",
    "body": "import {${1}} from \"${2}\";"
  },
  "JS: Default Import": {
    "prefix": "dimport",
    "body": "import ${1} from \"${2}\";"
  },
  "React: import": {
    "prefix": "rimp",
    "body": "import React from \"react\";"
  },
  "React: component skeleton": {
    "prefix": "cc",
    "body": "import React from \"react\";\n\n\nclass ${1} extends React.Component {\n\n\trender() {\n\t\treturn (\n\t\t\t${0:<div>\n\n\t\t\t</div>}\n\t\t);\n\t}\n};\n\nexport default ${1};"
  },
  "React: component class": {
    "prefix": "rclass",
    "body": "class ${1} extends React.Component {\n\n\trender() {\n\t\treturn (\n\t\t\t${0:<div>\n\n\t\t\t</div>}\n\t\t);\n\t}\n};\n"
  },
  "React: react constructor": {
    "prefix": "rconstructor",
    "body": "constructor(props) {\n\tsuper(props);\n}"
  },
  "React redux: this.props.dispatch": {
    "prefix": "tpd",
    "body": "this.props.dispatch(${1})"
  },
  "React router: this.props.router": {
    "prefix": "tpr",
    "body": "this.props.router(${1})"
  },
  "React Redux: connect": {
    "prefix": "exportconnect",
    "body": "export default connect(mapStateToProps)(${1});"
  },
  "React Redux: mapState": {
    "prefix": "mapstate",
    "body": "const mapState = (state, props) => {\n\treturn {\n\t\t${1}\n\t}\n}"
  },
  "React Redux: mapDispatch": {
    "prefix": "mapdispatch",
    "body": "const mapDispatch = (dispatch, props) => {\n\treturn {\n\t\t${1}\n\t}\n}"
  },
  "React Intl FormattedMessage": {
    "prefix": "formattedmessage",
    "body": "<FormattedMessage id=\"${1}\" defaultMessage=\"\" />"
  },
  "Console.log": {
    "prefix": "clog",
    "body": "console.log(${1});"
  },
  "Debug Console.log": {
    "prefix": "logd",
    "body": "console.log(\"######### \", ${1});"
  },
  "Find Obj": {
    "prefix": "findobj",
    "body": "findObj(state.${1}, [\"uuid\", ${2}]) || {}"
  },
  "Require": {
    "prefix": "nreq",
    "body": "require(\"${1}\");"
  }
}
